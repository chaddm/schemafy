{"name":"Schemafy","tagline":"","body":"v0.5\r\n--\r\n\r\n*TL;DR: Schemafy is a library for creating schemas, creating POJOs (Plain Old JavaScript Objects) from schemas, and validating POJOs against schemas.*\r\n\r\n----------\r\n\r\n*Why Schemafy?*\r\n--\r\n\r\nSchemafy was built to solve a problem: we wanted to be able to save document data, but not worry about trying to keep the structure up-to-date.  Normally, schemas are used to enforced structure in a database.  When a schema is changed, the database restructures everything, which takes time and risks data corruption.  We figured: If we never read the data again, why bother updating it?  Schemafy let us to load data and on-the-fly have it conform to a schema.\r\n\r\n*What can you do?*\r\n--\r\n\r\n- Define schemas with the JSON Schema standard with syntatic constraints, like type, range, and default value.\r\n- Create blank POJOs from a schema, where required properties are created automatically with default values.\r\n- Create POJOs from JSON data, where undefined properties are dropped and non-conforming data is coerced.\r\n\r\n----------\r\n\r\n\r\n### Installation\r\n\r\nInclude Schemafy in your project:\r\n\r\n```sh\r\n$ npm install schemafy --save\r\n```\r\n#### NodeJs and in the browser with browserify\r\nUse `require(\"schemafy\")`.\r\n\r\n#### In the browser with AMD\r\nSchemafy defines \"schemafy,\" and dependencies \"lodash\" and \"jsonschema\" must be defined.\r\n\r\n----------\r\n\r\n### Usage\r\n\r\n#### Create a Person schema:\r\n```javascript\r\nvar Schemafy = require('schemafy')\r\n\r\nvar Person = Schemafy(\"Person\", {\r\n    type: \"object\",\r\n    additionalProperties: false,\r\n    properties: {\r\n      id: {\r\n        type: \"number\",\r\n        required: true,\r\n        min: 0\r\n      },\r\n      username: {\r\n        type: \"string\",\r\n        required: true,\r\n        minLength: 1,\r\n      }\r\n    }\r\n  });\r\n```\r\n\r\n#### Create a blank POJO of Person:\r\n\r\n```javascript\r\nvar person = new Person();\r\n  // => { id: 0, username: \"\" }\r\nvar isPerson = person instanceof Person\r\n  // => true\r\n```\r\n\r\n#### Create a POJO from a source, with coercion:\r\n\r\n```javascript\r\nvar person = new Person({\r\n    id: \"123\",\r\n    username: \"woot\"\r\n  });\r\n  // => { id: 123, username: \"woot\" }\r\n```\r\n\r\n#### Create a POJO from a source, without coercion, and validate:\r\n\r\n```javascript\r\nvar person = new Person({\r\n    id: \"123\",\r\n    username: \"woot\"\r\n  }, {\r\n    coerce: false\r\n  });\r\n  // => { id: \"123\", username: \"woot\" }\r\nperson.__validate()\r\n  // => [ \"instance.id is not of type(s) number\" ]\r\n```\r\n\r\n----------\r\n\r\nContribution, Issues\r\n--\r\n\r\nPlease join us on GitHub at [chaddm/schemafy](https://github.com/chaddm/schemafy).\r\n\r\n----------\r\n\r\nLicense\r\n----\r\n\r\nMIT -  *Join the abode, share some code.*\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}